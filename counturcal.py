# -*- coding: utf-8 -*-
"""CountUrCal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cPcuncVROHrxC8kSBWJmK0MdrG16Gobq

# ชื่อ-นามสกุล :
# 1. นายริสกีร์ บิลแหละ 6510210284
# 2. นายธวัชชัย แก้วเขียว 6510210125

# Link Colab : https://colab.research.google.com/drive/1cPcuncVROHrxC8kSBWJmK0MdrG16Gobq?usp=sharing

# 3. ชุดข้อมูล

# 3.1 ชื่อชุดข้อมูล : Starbucks

ไฟล์ชุดข้อมูล : https://drive.google.com/file/d/18srijLShRtZKC4xIiGFi2kCQDJx7GFpZ/view?usp=sharing

# 3.2 จำนวนข้อมูลและจำนวนคุณลักษณะ (features)
"""

#จำนวนข้อมูลและจำนวนคุณลักษณะ (features)
import pandas as pd
stb = pd.read_csv('starbucks.csv')
print(f"จำนวนข้อมูล: {stb.shape[0]} ตัวอย่าง, จำนวนคุณลักษณะ (features): {stb.shape[1]} columns")

stb.head()

"""# 3.3 อธิบายแต่ละ feature"""

stb.columns

"""**จากข้อมูลเครื่องดื่มต่างๆในStarbucks มีรายละเอียดดังนี้**

**Beverage_category**: หมวดหมู่ของเครื่องดื่มช่วยในการจัดกลุ่มและวิเคราะห์ข้อมูลตามประเภทต่างๆ ของเครื่องดื่ม.

**Beverage**: ชื่อของเครื่องดื่มช่วยในการระบุชนิดของเครื่องดื่มที่กำลังวิเคราะห์.

**Beverage_prep**: วิธีการเตรียมเครื่องดื่มที่อาจมีผลต่อคุณค่าทางโภชนาการ.

**Calories**: จำนวนแคลอรี่ที่บ่งบอกถึงพลังงานที่ได้รับจากการบริโภคเครื่องดื่ม.

**Total Fat (g)**: ปริมาณไขมันทั้งหมดในเครื่องดื่มที่มีผลต่อสุขภาพโดยรวม.

**Trans Fat (g)**: ปริมาณไขมันทรานส์ที่อาจเพิ่มความเสี่ยงต่อโรคหัวใจ.

**Saturated Fat (g)**: ปริมาณไขมันอิ่มตัวที่ส่งผลต่อระดับคอเลสเตอรอลในเลือด.

**Sodium (mg)**: ปริมาณโซเดียมที่อาจส่งผลต่อความดันโลหิตและสุขภาพหัวใจ.

**Total Carbohydrates (g)**: ปริมาณคาร์โบไฮเดรตที่เป็นแหล่งพลังงานหลักในเครื่องดื่ม.

**Cholesterol (mg)**: ปริมาณคอเลสเตอรอลที่อาจมีผลต่อสุขภาพหัวใจ.

**Dietary Fibre (g)**: ปริมาณไฟเบอร์ที่ช่วยในการย่อยอาหารและรักษาสุขภาพลำไส้.

**Sugars (g)**: ปริมาณน้ำตาลที่มีผลต่อระดับน้ำตาลในเลือดและสุขภาพฟัน.

**Protein (g)**: ปริมาณโปรตีนที่สำคัญต่อการสร้างกล้ามเนื้อและการทำงานของร่างกาย.

**Vitamin A (% DV)**: เปอร์เซ็นต์ของค่าแนะนำต่อวันของวิตามิน A ที่สำคัญต่อการมองเห็นและภูมิคุ้มกัน.

**Vitamin C (% DV)**: เปอร์เซ็นต์ของค่าแนะนำต่อวันของวิตามิน C ที่ช่วยในการดูดซึมธาตุเหล็กและเสริมภูมิคุ้มกัน.

**Calcium (% DV)**: เปอร์เซ็นต์ของค่าแนะนำต่อวันของแคลเซียมที่สำคัญต่อการสร้างกระดูกและฟัน.

**Iron (% DV)**: เปอร์เซ็นต์ของค่าแนะนำต่อวันของธาตุเหล็กที่จำเป็นสำหรับการสร้างเซลล์เม็ดเลือดแดง.

**Caffeine (mg)**: ปริมาณคาเฟอีนที่มีผลกระตุ้นระบบประสาทกลางและช่วยให้ตื่นตัว.

# 3.4 จัดการข้อมูล (data cleansing & Transformation)

**Columns Adjustment (การปรับคอลัมน์)**
"""

stb.rename(columns ={
    ' Total Fat (g)': 'total_fat_g',
    'Trans Fat (g) ': 'trans_fat_g',
    'Saturated Fat (g)': 'saturated_fat_g',
    ' Sodium (mg)': 'sodium_mg',
    ' Total Carbohydrates (g) ': 'total_carbohydrates_g',
    'Cholesterol (mg)': 'cholesterol_mg',
    ' Dietary Fibre (g)': 'dietary_fibre_g',
    ' Sugars (g)': 'sugar_g',
    ' Protein (g) ': 'protein_g',
    'Vitamin A (% DV) ': 'Vitamin_A_DV',
    'Vitamin C (% DV)': 'Vitamin_C_DV',
    ' Calcium (% DV) ': 'calcium_DV',
    'Iron (% DV) ': 'iron_DV',
    'Caffeine (mg)': 'caffeine_mg'}, inplace=True
         )

print("ตรวจสอบ Missing Values:")
print(stb.isnull().sum())

nan_value = stb[pd.isna(stb['caffeine_mg'])]
nan_value

stb['caffeine_mg'].fillna('125', inplace=True)

"""**Converting data types (การแปลงชนิดคอลัมน์)**"""

stb.dtypes

def convert_percent(val):
    """
    แปลงstringเปอร์เซ็นต์หรือทศนิยมให้เป็นเปอร์เซ็นต์ทศนิยมจริง
    - หากค่าเป็นstring ให้ลบ % ออก
    - หารด้วย 100 ให้เป็นทศนิยม
    """
    if isinstance(val, str):
        val = val.replace('%', '')
    return float(val) / 100

# Apply the conversion function and reassign the results to the DataFrame
stb['Vitamin_A_DV'] = stb['Vitamin_A_DV'].apply(convert_percent)
stb['Vitamin_C_DV'] = stb['Vitamin_C_DV'].apply(convert_percent)
stb['calcium_DV'] = stb['calcium_DV'].apply(convert_percent)
stb['iron_DV'] = stb['iron_DV'].apply(convert_percent)

stb['total_fat_g']

# แทนที่สตริง "3 2" ด้วย "3.2"
stb['total_fat_g'] = stb['total_fat_g'].replace('3 2', '3.2')

# แปลงค่าในคอลัมน์เป็นค่าชนิดตัวเลข
stb['total_fat_g'] = pd.to_numeric(stb['total_fat_g'], errors='coerce')

# ลบแถวที่ซ้ำกันออก
stb.drop_duplicates(inplace=True)

stb.drop_duplicates(inplace=True)

stb['caffeine_mg'].unique()

stb[stb['caffeine_mg'].isin(['Varies', 'varies'])]['caffeine_mg'].value_counts()

stb = stb[stb['caffeine_mg'].str.lower() != 'varies']

# แปลงข้อมูลในคอลัมน์ 'caffeine_mg' เป็นตัวเลข โดยค่าที่ไม่สามารถแปลงได้จะถูกแทนที่ด้วย NaN
stb['caffeine_mg'] = pd.to_numeric(stb['caffeine_mg'], errors='coerce')

stb.dtypes

"""# 3.5 อธิบายการเตรียม Features (X) และ Target (y)

เตรียมข้อมูลโดยแบ่งข้อมูลออกเป็น 2 ส่วน คือ X กับ y
"""

from sklearn.model_selection import train_test_split

X = stb[['total_fat_g', 'trans_fat_g', 'saturated_fat_g', 'sodium_mg',
       'total_carbohydrates_g', 'cholesterol_mg', 'dietary_fibre_g', 'sugar_g',
       'protein_g', 'Vitamin_A_DV', 'Vitamin_C_DV', 'calcium_DV', 'iron_DV',
       'caffeine_mg']]
y = stb['Calories']

"""X : คือ features หรือตัวแปรอิสระ โดยเลือกคอลัมน์ 'total_fat_g', 'trans_fat_g', ... , 'caffeine_mg' ซึ่งเป็นข้อมูลโภชนาการต่างๆ

y : คือ target หรือตัวแปรตาม โดยเลือกคอลัมน์ 'Calories' ซึ่งเป็นแคลอรี่ของเครื่องดื่ม

# 3.6 เตรียมข้อมูล Train และ Test บันทึกเก็บลงไฟล์ csv
"""

# แบ่งข้อมูลออกเป็นชุดฝึกอบรมและชุดทดสอบ โดย 80% ของข้อมูลใช้สำหรับการฝึกอบรมและ 20% สำหรับการทดสอบ
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Save DataFrame to a new CSV file
output_file = 'starbucks_clean.csv'
stb.to_csv(output_file, index=False)

"""link download file : https://drive.google.com/file/d/16DOsW1ICt2qq5sGyCw8tWojbhB1xNxxD/view?usp=sharing

# 4. ดำเนินการ

# 4.1 เลือกอัลกอริทึมที่เหมาะสม

**1. Linear Regression**

**2. KNN Regression**
"""

from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor

"""# 4.2 กำหนด Hypermarameter"""

# Linear Regression
lr = LinearRegression() # Hyperparameter เป็นแบบ simple linear regression

# KNeighborsRegressor(KNN)
knn = KNeighborsRegressor(n_neighbors=2) # Hyperparameter เป็น 2 หรือ ค่า K = 2

"""# 4.3 วิธีการประเมินที่เลือกใช้

**เครื่องมือที่ใช้ในการประเมิน คือ Mean Squared Error (MSE), Mean Absolute Error (MAE), Root Mean Squared Error (RMSE) และ R-squared**
"""

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""# 4.4 สร้างโมเดลพร้อมบันทึกผลการประเมินผล

**Linear Regression**
"""

#โหลดข้อมูลจากไฟล์ .csv ที่บันทึกมา
file_path = 'starbucks_clean.csv'
data = pd.read_csv(file_path)
# สร้างโมเดล Linear Regression
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)
lm = LinearRegression().fit(X_train, y_train)
#coefficients represent the weights assigned to each feature in the model
lm.coef_

"""ผลการประเมินของ Linear Regression"""

print('Mean Absolute Error:',mean_absolute_error(y_test, lr_pred)) #Lower MAE values are better
print('Mean Squared Error:',mean_squared_error(y_test, lr_pred)) #Lower MSE values are better
print('Root Mean Squared Error:',mean_squared_error(y_test, lr_pred, squared=False)) #Lower value is better
print('R-squared:',r2_score(y_test, lr_pred)) #A value close to 1 indicates a very good fit

#Visualize the relationship between predicted and actual values
sns.set_palette('RdPu_r')
sns.regplot(x=lr_pred, y=y_test, scatter_kws={'alpha': 0.3})
plt.xlabel('predictions')
plt.title('Linear Model Evaluation')
plt.show()

"""**KNN Regression**"""

#โหลดข้อมูลจากไฟล์ .csv ที่บันทึกมา
file_path = 'starbucks_clean.csv'
data = pd.read_csv(file_path)

# สร้างโมเดล KNN Regression
knn = KNeighborsRegressor(n_neighbors=3)

# ฝึกโมเดลด้วยข้อมูล training set
knn.fit(X_train, y_train)

# ทำการทำนายผลด้วยข้อมูล testing set
knn_pred = knn.predict(X_test)

"""ผลการประเมินของ KNN Regression"""

print('Mean Absolute Error:',mean_absolute_error(y_test, knn_pred)) #Lower MAE values are better
print('Mean Squared Error:',mean_squared_error(y_test, knn_pred)) #Lower MSE values are better
print('Root Mean Squared Error:',mean_squared_error(y_test, knn_pred, squared=False)) #Lower value is better
print('R-squared:',r2_score(y_test, knn_pred)) #A value close to 1 indicates a very good fit

#Visualize the relationship between predicted and actual values
sns.set_palette('RdPu_r')
sns.regplot(x=knn_pred, y=y_test, scatter_kws={'alpha': 0.3})
plt.xlabel('predictions')
plt.title('Linear Model Evaluation')
plt.show()

"""# 4.5 เลือกโมเดลที่ดีที่สุด บันทึกไฟล์โมเดลเก็บไว้เพื่อนำไป Deploy"""

#บันทึกโมเดลที่ดีที่สุดด้วย pickle
import pickle

# บันทึกโมเดลที่ดีที่สุดลงไฟล์
with open('CountCaloriesModel.sav', 'wb') as f:
    pickle.dump(lr, f)

"""ลิงค์อัปโหลดไฟล์โมเดล : https://drive.google.com/file/d/126ty_kpi_RStEY-korG80pvN4-7e2pjB/view?usp=sharing

# 6 ตัวอย่างการ Deploy
"""

!pip install gradio

import gradio as gr
import numpy as np
import joblib

# โหลดโมเดลที่ถูกฝึกแล้ว
model_filename = 'CountCaloriesModel.sav'
lr = joblib.load(model_filename)

# ฟังก์ชันสำหรับการทำนายพลังงาน (Calories) จากโมเดลที่โหลดมา
def predict_calories(total_fat_g, trans_fat_g, saturated_fat_g, sodium_mg, total_carbohydrates_g, cholesterol_mg, dietary_fibre_g, sugar_g, protein_g, Vitamin_A_DV, Vitamin_C_DV, calcium_DV, iron_DV, caffeine_mg):
    ### แปลงเปอร์เซ็นต์เป็นสัดส่วน (เนื่องจากเปอร์เซ็นต์ต้องอยู่ในรูปแบบ 0.XX) ###
    Vitamin_A_DV /= 100
    Vitamin_C_DV /= 100
    calcium_DV /= 100
    iron_DV /= 100
    caffeine_mg /= 100

    # นำข้อมูลเข้าสู่โมเดล
    input_data = np.array([[total_fat_g, trans_fat_g, saturated_fat_g, sodium_mg, total_carbohydrates_g, cholesterol_mg, dietary_fibre_g, sugar_g, protein_g, Vitamin_A_DV, Vitamin_C_DV, calcium_DV, iron_DV, caffeine_mg]])

    # ทำนายผล
    prediction = lr.predict(input_data)

    # ส่งค่าผลลัพธ์ที่ได้
    return round(prediction[0], 2)

# สร้างอินพุตด้วย gr.components
inputs = [gr.components.Number(label="Total Fat (g)"),
          gr.components.Number(label="Trans Fat (g)"),
          gr.components.Number(label="Saturated Fat (g)"),
          gr.components.Number(label="Sodium (mg)"),
          gr.components.Number(label="Total Carbohydrates (g)"),
          gr.components.Number(label="Cholesterol (mg)"),
          gr.components.Number(label="Dietary Fibre (g)"),
          gr.components.Number(label="Sugar (g)"),
          gr.components.Number(label="Protein (g)"),
          gr.components.Number(label="Vitamin A (%DV)"),
          gr.components.Number(label="Vitamin C (%DV)"),
          gr.components.Number(label="Calcium (%DV)"),
          gr.components.Number(label="Iron (%DV)"),
          gr.components.Number(label="Caffeine (mg)")]

# สร้างเอาท์พุต Textbox
outputs = gr.components.Textbox(label="Predicted Calories")

# สร้างอินเทอร์เฟซ
gr.Interface(fn=predict_calories, inputs=inputs, outputs=outputs, title="Calories Prediction Model", description="ใช้โมเดลที่บันทึกไว้แล้วเพื่อทำนายค่าพลังงาน (Calories)").launch()